# version: "3.3"

# volumes:
#   postgres_data:
#   static_data:
#   media_data:

# services:
#   db:
#     image: postgres:13.0-alpine
#     container_name: ecommerce-db
#     env_file: .env
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     restart: always

#   backend:
#     build: ./core
#     container_name: ecommerce-backend
#     env_file: .env
#     volumes:
#       - static_data:/app/static
#       - media_data:/app/media
#     depends_on:
#       - db
#     ports:
#       - 8000:8000
#     links:
#       - db
#     restart: always
#     command: sh -c "python manage.py makemigrations &&
#       python manage.py migrate &&
#       python manage.py collectstatic --noinput &&
#       gunicorn project.wsgi:application --bind 0.0.0.0:8000 &&
#       stripe listen --forward-to localhost:8000/payment/webhook-stripe/"
#     develop:
#       watch:
#         - action: rebuild
#           path: .

#   redis:
#     image: redis:7.2.3-alpine
#     container_name: ecommerce-redis
#     restart: unless-stopped

#   celery:
#     build: ./core
#     container_name: ecommerce-celery
#     env_file: .env
#     depends_on:
#       - db
#       - redis
#     volumes:
#       - static_data:/app/static
#     restart: always
#     command: celery -A project worker --loglevel=info

#   celery-beat:
#     build: ./core
#     container_name: ecommerce-celery-beat
#     env_file: .env
#     depends_on:
#       - db
#       - redis
#     volumes:
#       - static_data:/app/static
#     restart: always
#     command: python -m celery -A project beat --loglevel=info

#   nginx:
#     image: nginx:latest
#     container_name: ecommerce-nginx
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
#       - static_data:/app/static
#       - media_data:/app/media
#     ports:
#       - 80:80
#     restart: always

version: "3.3"

volumes:
  postgres_data:
  static_data:
  media_data:

networks:
  my-network:
    driver: bridge

services:
  db:
    image: postgres:13.0-alpine
    env_file: .env
    volumes:
      #- postgres_data:/var/lib/postgresql/data      ##############################################################################################################################
      - ${APP_PATH_DB}:/var/lib/postgresql/data
    restart: always
    networks:
      - my-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      #POSTGRES_HOST: ${POSTGRES_HOST}
      

  redis:
    image: redis:7.2.3-alpine
    restart: unless-stopped
    networks:
      - my-network

  backend:
    # image: faizan44/fullstack-ecommerce-backend
    build: ./core
    env_file: .env
    volumes:
      #- static_data:/app/static
      #- media_data:/app/media
      - ${APP_PATH_STATIC}:/app/static
      - ${APP_PATH_MEDIA}:/app/media
      #- /home/megashop/eski_shop/fullstack-ecommerce/core:/app
      - ${APP_PATH_FOR_VSC}:/app
    depends_on:
      - db
    ports:
      - 8000:8000
    command: sh -c "python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn project.wsgi:application --bind 0.0.0.0:8000"
    restart: always
    networks:
      - my-network

  celery:
    # image: faizan44/fullstack-ecommerce-celery
    build: ./core
    env_file: .env
    depends_on:
      - db
      - redis
    command: celery -A project worker --loglevel=info
    networks:
      - my-network
    restart: always

  celery-beat:
    # image: faizan44/fullstack-ecommerce-celery-beat
    build: ./core
    env_file: .env
    depends_on:
      - celery
      - db
      - redis
    command: celery -A project beat --loglevel=info
    networks:
      - my-network
    restart: always

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      #- static_data:/app/static
      #- media_data:/app/media
      - ${APP_PATH_STATIC}:/app/static
      - ${APP_PATH_MEDIA}:/app/media
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always
    networks:
      - my-network
