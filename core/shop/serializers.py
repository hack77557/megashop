from rest_framework import serializers
from .models import Category, Product, ProductAttribute, Attribute, ProductImage

class CategorySerializer(serializers.ModelSerializer):
    image = serializers.ImageField(required=False)  # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å

    class Meta:
        model = Category
        fields = ['id', 'name', 'slug', 'description', 'created_at', 'parent', 'image']  # –î–æ–¥–∞—î–º–æ `image`
        ref_name = "ShopCategorySerializer"


class ProductAttributeSerializer(serializers.ModelSerializer):
    attribute = serializers.CharField(source='attribute.name')

    class Meta:
        model = ProductAttribute
        fields = ['attribute', 'value']

    def to_internal_value(self, data):
        """
        –û—Å–∫—ñ–ª—å–∫–∏ `multipart/form-data` –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤–∫–ª–∞–¥–µ–Ω—ñ JSON-–æ–±'—î–∫—Ç–∏, 
        —Ü–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.
        """
        if isinstance(data, list):
            return super().to_internal_value({k: v for d in data for k, v in d.items()})
        return super().to_internal_value(data)
   

class ProductImageSerializer(serializers.ModelSerializer):
    class Meta:
        model = ProductImage
        #fields = ['id', 'product', 'image']
        #extra_kwargs = {'product': {'required': False}}  # üî• `product` —Ç–µ–ø–µ—Ä –Ω–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º
        fields = ['id', 'image']


class ProductSerializer(serializers.ModelSerializer):
    attributes = ProductAttributeSerializer(many=True, required=False)
    images = ProductImageSerializer(many=True, required=False)  # üî• –î–æ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å, –†–æ–±–∏–º–æ –ø–æ–ª–µ `images` –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –∑–∞–ø–∏—Å—É
    image = serializers.ImageField(required=False)  # üî• –ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è


    class Meta:
        model = Product
        fields = [
            'id', 'title', 'brand', 'description', 'slug', 'price', 'image', 'images', 'purchase_price', 'available', 'discount', 'category', 'attributes', 'product_code'
        ] 
        ref_name = "ShopProductSerializer"

    def create(self, validated_data):

        request = self.context.get('request')  # –û—Ç—Ä–∏–º—É—î–º–æ request
        #attributes_data = request.data.getlist('attributes')  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –∑ `form-data`
        attributes_data = request.POST.getlist('attributes')
        images_data = request.FILES.getlist('images')  # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª–∏

        # ‚úÖ –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è POST-–∑–∞–ø–∏—Ç—É
        #print("üü¢ [POST] –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:")
        #print("    - validated_data:", validated_data)
        #print("    - attributes_data:", attributes_data)
        #print("    - images_data:", images_data)

        product = Product.objects.create(**validated_data)

         # üî• –û–±—Ä–æ–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
        for attr in attributes_data:
            try:
                attribute_name, value = attr.split(':', 1)  # –î—ñ–ª–∏–º–æ –ª–∏—à–µ –Ω–∞ 2 —á–∞—Å—Ç–∏–Ω–∏
                attribute, _ = Attribute.objects.get_or_create(name=attribute_name.strip())
                ProductAttribute.objects.create(product=product, attribute=attribute, value=value.strip())
            except ValueError:
                raise serializers.ValidationError(
                    {"attributes": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–ù–∞–∑–≤–∞: –ó–Ω–∞—á–µ–Ω–Ω—è'."}
                )

        # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        for image_data in images_data:
            #ProductImage.objects.create(product=product, **image_data)  # üî• –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –ø—Ä–æ–¥—É–∫—Ç—É
            ProductImage.objects.create(product=product, image=image_data)

        return product

    def to_representation(self, instance):
        """
        –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —â–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω—ñ –¥–∞–Ω—ñ `attributes` —Ç–∞ `images`.
        """
        representation = super().to_representation(instance)

        # –î–æ–¥–∞—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        representation['attributes'] = ProductAttributeSerializer(instance.product_attributes.all(), many=True).data
        
        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        representation['images'] = ProductImageSerializer(instance.images.all(), many=True).data

        return representation
    
    def update(self, instance, validated_data):
        """ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É —Ä–∞–∑–æ–º —ñ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ """
        request = self.context.get("request")  # –û—Ç—Ä–∏–º—É—î–º–æ request
        attributes_data = request.POST.getlist("attributes")  # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏
        images_data = request.FILES.getlist("images", [])  # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª–∏

        #print(f"üîµ [PUT] –û—Ç—Ä–∏–º–∞–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏: {attributes_data}")
        #print(f"üîµ [PUT] –û—Ç—Ä–∏–º–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {images_data}")

        # üî• –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç—É
        instance = super().update(instance, validated_data)

        # üî• –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
        instance.product_attributes.all().delete()

        for attr in attributes_data:
            print(f"üîπ [PUT] –û–±—Ä–æ–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞: {attr}")
            try:
                attribute_name, value = attr.split(":", 1)
                attribute, _ = Attribute.objects.get_or_create(name=attribute_name.strip())
                ProductAttribute.objects.create(product=instance, attribute=attribute, value=value.strip())
                print(f"‚úÖ [PUT] –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∞—Ç—Ä–∏–±—É—Ç: {attribute_name} = {value}")
            except ValueError:
                print(f"‚ö†Ô∏è [PUT] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—Ç—Ä–∏–±—É—Ç–∞: {attr}")

        # üî• –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
        if images_data:
            instance.images.all().delete()
            for image in images_data:
                ProductImage.objects.create(product=instance, image=image)

        return instance
 


class ProductDetailtSerializer(serializers.ModelSerializer):
    attributes = ProductAttributeSerializer(source='product_attributes', many=True)  # –ü–æ–≤'—è–∑–∞–Ω–µ –ø–æ–ª–µ
    images = ProductImageSerializer(many=True, required=False)  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    class Meta:
        model = Product
        fields = [
            'id', 'title', 'brand', 'description', 'slug', 'price', 'purchase_price', 'image', 'images', 'available',
            'created_at', 'updated_at', 'discount', 'category', 'attributes', 'product_code'
        ]
        ref_name = "ShopProductDetailSerializer"  # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è

class AttributeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attribute
        fields = ['id', 'name']  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–æ–ª—è



